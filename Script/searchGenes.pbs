#!/bin/bash
#PBS -N searchGenes
#PBS -l select=1:ncpus=1:mem=4gb
#PBS -l walltime=24:00:00
#PBS -j oe
#
# This script can be either run through the Portable Batch System (PBS mode) or simply bash (local mode). If the sample size
# is large, the former mode is often preferred on an HPC where the PBS is enabled.
# - PBS mode (on a high-performance computing cluster where the PBS job scheduler is enabled):
#    Job parameter (PBS mode): c, path to a configuration file
#     Example command: qsub -v c="searchGenes.config" searchGenes.pbs > searchGenes.log
# - bash mode (without PBS):
#    bash searchGenes.pbs searchGenes.config > searchGenes.log
#
# Copyright (C) 2020-2022 Yu Wan <wanyuac@126.com>
# Licensed under the GNU General Public Licence version 3 (GPLv3) <https://www.gnu.org/licenses/>.
# Creation: 28 August 2020; the latest modification: 10 December 2022

##### Jump to the current working directory to enable use of relative paths (for example, to access the configuration file)
# The job will be run under the directory where it is submitted.

##### Execute the configuration file to read parameters, which are set before submitting this job #####
# This block also loads prerequsite modules when they are specified in the configuration file.
if [ -z "$c" ]  # Argument c can be a path relative to the current working directory
then
    echo 'Run gene screen in the local mode.'  # In this case, the configuration file is provided to this script via its first argument (see the example command).
    if [ -z "$1" ]
    then
        echo 'Error: the path to the configuration file is not provided.'
        exit 1
    else  # bash mode, in which searchGenes.pbs is used as a usual bash script without submission to the PBS
        echo "Reading configurations from file ${c}."
        source $1
    fi
elif [ -f "$c" ]  # PBS mode
then
    echo -e "Run gene screen in the PBS mode.\nReading configurations from file ${c}."
    cd $PBS_O_WORKDIR
    source $c  # Read user's configurations
else
    echo "Cannot find the configuration file ${c}."
    exit 0
fi

##### Load environmental modules #####
# Code in this block is platform-specific. Please modify the code for your system.
if [ ! -z "${CONDA_ENV}" ]
then
    if [ ! -z "$MODULE" ]
    then
        echo "Activate conda environment $CONDA_ENV through module $MODULE"
        module load $MODULE
    fi
    if [ $CONDA_ACTIVATE_METHOD = 'source' ]
    then
        source activate $CONDA_ENV  # Customisation: some systems use this command to activate an environment
    else
        conda activate $CONDA_ENV
    fi
elif [ ! -z "$BLASTN_DIR" ]
then
    export PATH="$BLASTN_DIR":$PATH
else
    echo 'Going to run BLAST straightaway without loading any environmental module or conda environment or changing the PATH variable.'
fi

##### Create the directory of BLAST databases
check_dir() {
    if [ ! -d "$1" ]
    then
        mkdir $1
    fi
}

check_dir $DB_DIR
check_dir $OUT_DIR

##### Screen genes in assemblies
# Print arguments
echo 'Arguments'
echo "  Subject genomes: ${GENOMES}"
echo "  Queries: ${QUERIES}"
echo "  BLAST task: ${TASK}"
echo "  Minimum nucleotide identity: ${MIN_IDENTITY}"
echo "  Maximum number of hits per query sequence: ${MAX_TARGET_SEQS}"
echo "  Maximum e-value: ${MAX_EVALUE}"

while read -r line
do
    IFS=$'\t' read -r -a fields <<< "$line"
    genome="${fields[0]}"
    fasta="${fields[1]}"
    if [ ! -z "$genome" ] && [ ! -f ${DB_DIR}/${genome}.nsq ]
    then
        makeblastdb -in $fasta -out ${DB_DIR}/$genome -dbtype nucl
    fi
    blastn -query $QUERIES -db ${DB_DIR}/$genome -out ${OUT_DIR}/${genome}__${TASK}.tsv -task $TASK -evalue $MAX_EVALUE -perc_identity $MIN_IDENTITY -max_target_seqs $MAX_TARGET_SEQS -outfmt '6 qseqid sseqid slen pident qcovhsp length mismatch gapopen qstart qend sstart send sstrand evalue bitscore sseq'
done < $GENOMES
